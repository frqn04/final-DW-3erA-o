"""
Formularios personalizados para la app users.

Este m√≥dulo contiene formularios espec√≠ficos para funcionalidades de usuarios,
incluyendo formularios de login, cambio de contrase√±a, registro y edici√≥n de perfil.

Caracter√≠sticas:
- Validaciones avanzadas de seguridad
- Estilos Bootstrap 5 integrados
- Mensajes de error personalizados
- Validaciones de contrase√±as seguras
- Formularios responsive y accesibles
"""

import re
from django import forms
from django.contrib.auth.forms import PasswordChangeForm, UserCreationForm
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.utils import timezone
from datetime import datetime, timedelta

User = get_user_model()


class LoginForm(forms.Form):
    """
    Formulario de login personalizado que requiere email, DNI y contrase√±a.
    
    Este formulario se utiliza junto con el EmailDNIBackend para proporcionar
    autenticaci√≥n de doble factor usando email y DNI como identificadores.
    """
    
    email = forms.EmailField(
        label='Correo Electr√≥nico',
        max_length=254,
        widget=forms.EmailInput(attrs={
            'class': 'form-control form-control-lg',
            'placeholder': 'tu-email@ejemplo.com',
            'autocomplete': 'email',
            'autofocus': True,
            'aria-describedby': 'emailHelp',
        }),
        help_text='Ingresa tu direcci√≥n de correo electr√≥nico registrada.',
        error_messages={
            'required': 'üìß El correo electr√≥nico es obligatorio.',
            'invalid': '‚ùå Ingresa un correo electr√≥nico v√°lido.',
        }
    )
    
    dni = forms.CharField(
        label='DNI/C√©dula',
        max_length=20,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '12345678',
            'autocomplete': 'off',
        }),
        help_text='Ingresa tu Documento Nacional de Identidad.',
        error_messages={
            'required': 'El DNI es obligatorio.',
            'max_length': 'El DNI no puede tener m√°s de 20 caracteres.',
        }
    )
    
    password = forms.CharField(
        label='Contrase√±a',
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢',
            'autocomplete': 'current-password',
        }),
        help_text='Ingresa tu contrase√±a.',
        error_messages={
            'required': 'La contrase√±a es obligatoria.',
        }
    )
    
    remember_me = forms.BooleanField(
        label='Recordarme',
        required=False,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input',
        }),
        help_text='Mantener la sesi√≥n iniciada en este dispositivo.',
    )
    
    def clean_email(self):
        """
        Validaci√≥n personalizada para el campo email.
        
        Returns:
            str: Email normalizado en min√∫sculas
            
        Raises:
            ValidationError: Si el email no es v√°lido
        """
        email = self.cleaned_data.get('email')
        if email:
            # Normalizar a min√∫sculas
            email = email.lower().strip()
            
            # Validaci√≥n adicional de formato (m√°s estricta que la por defecto)
            email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            if not re.match(email_pattern, email):
                raise ValidationError('El formato del correo electr√≥nico no es v√°lido.')
        
        return email
    
    def clean_dni(self):
        """
        Validaci√≥n personalizada para el campo DNI.
        
        Returns:
            str: DNI limpio sin espacios adicionales
            
        Raises:
            ValidationError: Si el DNI no es v√°lido
        """
        dni = self.cleaned_data.get('dni')
        if dni:
            # Limpiar espacios
            dni = dni.strip()
            
            # Verificar que no est√© vac√≠o despu√©s de limpiar
            if not dni:
                raise ValidationError('El DNI no puede estar vac√≠o.')
            
            # Verificar que contenga solo n√∫meros y letras (sin espacios internos)
            if not re.match(r'^[a-zA-Z0-9]+$', dni):
                raise ValidationError('El DNI debe contener solo n√∫meros y letras, sin espacios.')
            
            # Verificar longitud m√≠nima
            if len(dni) < 5:
                raise ValidationError('El DNI debe tener al menos 5 caracteres.')
        
        return dni
    
    def clean_password(self):
        """
        Validaci√≥n personalizada para el campo password.
        
        Returns:
            str: Password sin modificaciones
            
        Raises:
            ValidationError: Si la contrase√±a no cumple requisitos m√≠nimos
        """
        password = self.cleaned_data.get('password')
        if password:
            # Verificar longitud m√≠nima
            if len(password) < 4:  # M√≠nimo relajado para login
                raise ValidationError('La contrase√±a debe tener al menos 4 caracteres.')
        
        return password
    
    def clean(self):
        """
        Validaci√≥n a nivel de formulario.
        
        Returns:
            dict: Datos limpios del formulario
            
        Raises:
            ValidationError: Si hay errores de validaci√≥n cruzada
        """
        cleaned_data = super().clean()
        email = cleaned_data.get('email')
        dni = cleaned_data.get('dni')
        password = cleaned_data.get('password')
        
        # Verificar que todos los campos requeridos est√©n presentes
        if not email or not dni or not password:
            raise ValidationError(
                'Todos los campos (email, DNI y contrase√±a) son obligatorios para el login.'
            )
        
        return cleaned_data


class CustomPasswordChangeForm(PasswordChangeForm):
    """
    Formulario personalizado para cambio de contrase√±a en el primer login.
    
    Extiende el PasswordChangeForm de Django con estilos personalizados
    y validaciones adicionales para el contexto escolar.
    """
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # Personalizar el campo de contrase√±a actual
        self.fields['old_password'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'Contrase√±a actual',
            'autocomplete': 'current-password',
        })
        self.fields['old_password'].help_text = 'Ingresa tu contrase√±a temporal actual.'
        
        # Personalizar el campo de nueva contrase√±a
        self.fields['new_password1'].widget.attrs.update({
            'class': 'form-control form-control-lg',
            'placeholder': 'Nueva contrase√±a',
            'autocomplete': 'new-password',
            'aria-describedby': 'newPasswordHelp',
        })
        self.fields['new_password1'].help_text = (
            'üîê Tu contrase√±a debe tener al menos 8 caracteres, '
            'incluir letras may√∫sculas, min√∫sculas, n√∫meros y un s√≠mbolo especial.'
        )
        
        # Personalizar el campo de confirmaci√≥n
        self.fields['new_password2'].widget.attrs.update({
            'class': 'form-control form-control-lg',
            'placeholder': 'Confirmar nueva contrase√±a',
            'autocomplete': 'new-password',
            'aria-describedby': 'confirmPasswordHelp',
        })
        self.fields['new_password2'].help_text = 'üîÑ Repite la nueva contrase√±a para confirmar.'
        
        # Actualizar etiquetas
        self.fields['old_password'].label = 'üîí Contrase√±a Actual'
        self.fields['new_password1'].label = 'üÜï Nueva Contrase√±a'
        self.fields['new_password2'].label = '‚úÖ Confirmar Nueva Contrase√±a'
    
    def clean_new_password1(self):
        """
        Validaci√≥n avanzada de la nueva contrase√±a.
        
        Returns:
            str: Nueva contrase√±a validada
            
        Raises:
            ValidationError: Si la contrase√±a no cumple los requisitos
        """
        password = self.cleaned_data.get('new_password1')
        
        if password:
            # Verificar longitud m√≠nima
            if len(password) < 8:
                raise ValidationError('üîê La contrase√±a debe tener al menos 8 caracteres.')
            
            # Verificar que contenga al menos una letra min√∫scula
            if not re.search(r'[a-z]', password):
                raise ValidationError('üî§ La contrase√±a debe contener al menos una letra min√∫scula.')
            
            # Verificar que contenga al menos una letra may√∫scula
            if not re.search(r'[A-Z]', password):
                raise ValidationError('üî† La contrase√±a debe contener al menos una letra may√∫scula.')
            
            # Verificar que contenga al menos un n√∫mero
            if not re.search(r'\d', password):
                raise ValidationError('üî¢ La contrase√±a debe contener al menos un n√∫mero.')
            
            # Verificar que contenga al menos un car√°cter especial
            if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
                raise ValidationError('üî£ La contrase√±a debe contener al menos un s√≠mbolo especial (!@#$%^&*(),.?":{}|<>).')
            
            # Verificar que no sea demasiado com√∫n
            common_passwords = [
                'password', '12345678', 'qwerty123', 'admin123', 
                'Password1', 'password123', '123456789', 'admin1234'
            ]
            if password.lower() in [p.lower() for p in common_passwords]:
                raise ValidationError('üö´ Esta contrase√±a es demasiado com√∫n. Elige una m√°s segura.')
        
        return password


class UserRegistrationForm(UserCreationForm):
    """
    Formulario de registro de usuarios con campos adicionales.
    
    Extiende UserCreationForm con campos espec√≠ficos para el sistema escolar.
    """
    
    email = forms.EmailField(
        label='Correo Electr√≥nico',
        max_length=254,
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': 'correo@ejemplo.com',
            'autocomplete': 'email',
        }),
        help_text='üìß Ingresa un correo electr√≥nico v√°lido.',
    )
    
    dni = forms.CharField(
        label='DNI/C√©dula',
        max_length=20,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '12345678',
            'autocomplete': 'off',
        }),
        help_text='üÜî Documento Nacional de Identidad.',
    )
    
    first_name = forms.CharField(
        label='Nombres',
        max_length=30,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Juan Carlos',
            'autocomplete': 'given-name',
        }),
        help_text='üë§ Nombres completos.',
    )
    
    last_name = forms.CharField(
        label='Apellidos',
        max_length=30,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Garc√≠a L√≥pez',
            'autocomplete': 'family-name',
        }),
        help_text='üë• Apellidos completos.',
    )
    
    phone = forms.CharField(
        label='Tel√©fono',
        max_length=20,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '+1234567890',
            'autocomplete': 'tel',
        }),
        help_text='üì± N√∫mero de tel√©fono (opcional).',
    )
    
    birth_date = forms.DateField(
        label='Fecha de Nacimiento',
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date',
            'autocomplete': 'bday',
        }),
        help_text='üéÇ Tu fecha de nacimiento (opcional).',
    )
    
    role = forms.ChoiceField(
        label='Rol en el Sistema',
        choices=[
            ('', 'Selecciona un rol'),
            ('student', 'üë®‚Äçüéì Estudiante'),
            ('teacher', 'üë®‚Äçüè´ Profesor'),
            ('parent', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Padre/Madre'),
            ('staff', 'üë®‚Äçüíº Personal Administrativo'),
        ],
        widget=forms.Select(attrs={
            'class': 'form-select',
        }),
        help_text='üé≠ Selecciona tu rol principal en la instituci√≥n.',
    )
    
    terms_accepted = forms.BooleanField(
        label='Acepto los t√©rminos y condiciones',
        required=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input',
        }),
        help_text='üìã Debes aceptar los t√©rminos para continuar.',
        error_messages={
            'required': '‚úÖ Debes aceptar los t√©rminos y condiciones.',
        }
    )
    
    class Meta:
        model = User
        fields = ('email', 'dni', 'first_name', 'last_name', 'phone', 'birth_date', 'role', 'password1', 'password2')
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # Personalizar campos de contrase√±a
        self.fields['password1'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'Contrase√±a segura',
            'autocomplete': 'new-password',
        })
        self.fields['password1'].help_text = (
            'üîê M√≠nimo 8 caracteres con may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos.'
        )
        
        self.fields['password2'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'Confirmar contrase√±a',
            'autocomplete': 'new-password',
        })
        self.fields['password2'].help_text = 'üîÑ Repite la contrase√±a para confirmar.'
        
        # Actualizar etiquetas
        self.fields['password1'].label = 'üîí Contrase√±a'
        self.fields['password2'].label = '‚úÖ Confirmar Contrase√±a'
    
    def clean_email(self):
        """Validaci√≥n del email."""
        email = self.cleaned_data.get('email')
        if email:
            email = email.lower().strip()
            if User.objects.filter(email=email).exists():
                raise ValidationError('üìß Ya existe un usuario con este correo electr√≥nico.')
        return email
    
    def clean_dni(self):
        """Validaci√≥n del DNI."""
        dni = self.cleaned_data.get('dni')
        if dni:
            dni = dni.strip().upper()
            if User.objects.filter(dni=dni).exists():
                raise ValidationError('üÜî Ya existe un usuario con este DNI.')
            if len(dni) < 5:
                raise ValidationError('üìè El DNI debe tener al menos 5 caracteres.')
        return dni
    
    def clean_birth_date(self):
        """Validaci√≥n de la fecha de nacimiento."""
        birth_date = self.cleaned_data.get('birth_date')
        if birth_date:
            today = timezone.now().date()
            age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
            
            if birth_date >= today:
                raise ValidationError('üìÖ La fecha de nacimiento no puede ser en el futuro.')
            if age > 120:
                raise ValidationError('üìÖ Por favor verifica la fecha de nacimiento.')
            if age < 5 and self.cleaned_data.get('role') == 'teacher':
                raise ValidationError('üìÖ La edad no es apropiada para el rol seleccionado.')
        
        return birth_date


class UserProfileForm(forms.ModelForm):
    """
    Formulario para editar el perfil del usuario.
    
    Permite a los usuarios actualizar su informaci√≥n personal.
    """
    
    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'phone', 'address', 'birth_date']
        widgets = {
            'first_name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Nombres',
            }),
            'last_name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Apellidos',
            }),
            'phone': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '+1234567890',
            }),
            'address': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Direcci√≥n completa',
            }),
            'birth_date': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'date',
            }),
        }
        help_texts = {
            'first_name': 'üë§ Tus nombres completos',
            'last_name': 'üë• Tus apellidos completos',
            'phone': 'üì± N√∫mero de tel√©fono de contacto',
            'address': 'üè† Tu direcci√≥n completa',
            'birth_date': 'üéÇ Tu fecha de nacimiento',
        }
    
    def clean_birth_date(self):
        """Validaci√≥n de fecha de nacimiento."""
        birth_date = self.cleaned_data.get('birth_date')
        if birth_date:
            today = timezone.now().date()
            if birth_date >= today:
                raise ValidationError('üìÖ La fecha de nacimiento no puede ser en el futuro.')
        return birth_date


class PasswordResetRequestForm(forms.Form):
    """
    Formulario para solicitar restablecimiento de contrase√±a.
    
    Requiere email y DNI para mayor seguridad.
    """
    
    email = forms.EmailField(
        label='Correo Electr√≥nico',
        max_length=254,
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': 'tu-email@ejemplo.com',
            'autocomplete': 'email',
            'autofocus': True,
        }),
        help_text='üìß Correo electr√≥nico registrado en tu cuenta.',
    )
    
    dni = forms.CharField(
        label='DNI/C√©dula',
        max_length=20,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '12345678',
            'autocomplete': 'off',
        }),
        help_text='üÜî Tu Documento Nacional de Identidad.',
    )
    
    def clean(self):
        """Validaci√≥n cruzada de email y DNI."""
        cleaned_data = super().clean()
        email = cleaned_data.get('email')
        dni = cleaned_data.get('dni')
        
        if email and dni:
            try:
                user = User.objects.get(email=email.lower(), dni=dni.upper())
                if not user.is_active:
                    raise ValidationError('‚ùå Esta cuenta no est√° activa.')
            except User.DoesNotExist:
                raise ValidationError('‚ùå No se encontr√≥ una cuenta con estos datos.')
        
        return cleaned_data
